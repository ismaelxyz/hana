#!/usr/bin/env haru
//#!/home/user/Development/hana/target/release/haru

record TodoProgram

    // loading
    func start(self)
        args = Sys::args()
        if args.length() > 1 then return self.handle(args)
        // if args.length() > 1 return self.handle(args)
        return self.help()
    end

    // cli
    func help(self)
        print(
"Arguments:
    - add [string]: adds a note in your list
    - update [idx] [string]: replaces note at index [idx] with [string]
    - list: lists all todo notes
    - remove [idx]: removes note at index [idx] from your list
")
    end

    func handle(self, args)
        method = args[1]
        func expect_arg(idx, name)
            if idx >= args.length() begin
                raise "method " + method + " expects argument for " + name
            end

            /*
            if idx >= args.length()
                raise "method " + method + " expects argument for " + name
            end
            */
            return args[idx]
        end
        if method == "add" then return self.add(expect_arg(2, "note"))
        if method == "update" then return self.update(expect_arg(2, "index"), expect_arg(3, "note"))
        if method == "list" then return self.list()
        if method == "remove" then return self.remove(expect_arg(2, "index"))
        print("Unknown method " + method + "\n")
        return self.help()
    end

    // todo functions
    func add(self, note)
        file = File("/tmp/notes", "cra")
        file.write(note + "\n")
        print("Added note for '" + note + "'\n")
    end

    func update(self, idx, note)
        file = File("/tmp/notes", "crw")
        idx = Int(idx)
        state = [0]
        lines = file.read().split("\n").map(fn(line)
            if state[0] == idx - 1
                state[0] += 1
                print("Updated index " + idx + " to '" + note + "'\n")
                return note
            else
                state[0] += 1
                return line
            end
        end)
        file.close()
        file = File("/tmp/notes", "cwt")
        file.write(lines.join("\n"))
    end

    func remove(self, idx)
        file = File("/tmp/notes", "crw")
        idx = Int(idx)
        state = [0]
        lines = file.read().split("\n").filter(fn(line)
            if state[0] == idx -1
                print("Removed index ", idx, "\n")
                state[0] += 1
                return false
            else
                state[0] += 1
                return true
            end
            /*
            if state[0] == idx -1
                // ...
            else
                // ...
            end
            */
        end)
        file.close()
        file = File("/tmp/notes", "cwt")
        file.write(lines.join("\n"))
    end

    func list(self)
        file = File("/tmp/notes", "r")
        lines = file.read().split("\n")
        for i in 0..lines.length()-1
            line = lines[i]
            print(i+1, ': ', line, '\n')
        end
    end

end

func main()
    try
        TodoProgram.start()
    case String as s
        print("Error: ", s, "\n")
    end
end

main()